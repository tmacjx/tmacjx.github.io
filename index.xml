<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tmacKan - A record for Life</title><link>http://localhost:1313/</link><description>Recent content on tmacKan - A record for Life</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>tmackan</copyright><lastBuildDate>Sun, 28 Feb 2021 11:15:09 +0800</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>http://localhost:1313/about/</link><pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate><guid>http://localhost:1313/about/</guid><description>About Me 自由和风 坐标 北京 软件工程师 Java/Python/Linux/Go 联系方式 kan49733110@163.com</description></item><item><title>Java线程池总结</title><link>http://localhost:1313/post/threadpool/</link><pubDate>Sun, 28 Feb 2021 11:15:09 +0800</pubDate><guid>http://localhost:1313/post/threadpool/</guid><description>&lt;h1 id="1工作流程">1.工作流程&lt;/h1>
&lt;p>1.不会初始化corePoolSize个线程，有任务来了才创建工作线程;&lt;/p>
&lt;p>2.当核心线程满了之后不会立即扩容线程池，而是把任务堆积到工作队列中;&lt;/p>
&lt;p>3.当工作队列满了以后扩容线程池，一直到线程个数达到maximumPoolSize为止;&lt;/p>
&lt;p>4.如果队列已满且达到了最大线程后还有任务进来，按照拒绝策略处理;&lt;/p>
&lt;p>5.当线程数大于核心线程数时，线程等待keepAliveTime后还是没有任务需要处理时，收缩线程到核心线程数；&lt;/p></description></item><item><title>Linux操作备忘</title><link>http://localhost:1313/post/linux/</link><pubDate>Sat, 06 Feb 2021 21:00:00 +0000</pubDate><guid>http://localhost:1313/post/linux/</guid><description>&lt;h2 id="linux">Linux&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">软链接
&amp;gt; ln -s 源文件 目标文件
压缩/解压tar.gz
压缩
&amp;gt; tar -czf posts.tar.gz target_folder
解压
&amp;gt; tar -xzf posts.tar.gz target_folder
scp命令
从本地复制到远程
&amp;gt; scp local_file remote_username@remote_ip:remote_folder
从远程复制到本地
&amp;gt; scp remote_username@remote_ip:remote_folder local_file
ab工具压力测试
&amp;gt; ab -n 1000 -c 1000 请求地址
-n后面的是请求数
-c后面的是并发数
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Java面试资料</title><link>http://localhost:1313/post/java%E9%9D%A2%E8%AF%95%E8%B5%84%E6%96%99/</link><pubDate>Mon, 28 Dec 2020 22:17:08 +0800</pubDate><guid>http://localhost:1313/post/java%E9%9D%A2%E8%AF%95%E8%B5%84%E6%96%99/</guid><description>* ThreadLocal 理解Java中的ThreadLocal - 技术小黑屋 深入分析 ThreadLocal 内存泄漏问题 - 简书 并发编程 | ThreadLocal 源码深入分析 * 集合相关 Java集合干货系列 - 嘟</description></item><item><title>系统设计面试-总览</title><link>http://localhost:1313/post/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E6%80%BB%E8%A7%88/</link><pubDate>Mon, 28 Dec 2020 22:17:08 +0800</pubDate><guid>http://localhost:1313/post/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E6%80%BB%E8%A7%88/</guid><description>步骤1: 明确要求 提问来确定问题的范围 设计问题 没有唯一的正确答案，需要在一开始就要定义问题的目标 因为只有35-40分钟的时间来设计, 应该关注系</description></item><item><title>Java和Python对比</title><link>http://localhost:1313/post/java%E5%92%8Cpython%E5%AF%B9%E6%AF%94/</link><pubDate>Sat, 26 Dec 2020 11:15:09 +0800</pubDate><guid>http://localhost:1313/post/java%E5%92%8Cpython%E5%AF%B9%E6%AF%94/</guid><description>一.语言相关 1.类型 1 2 3 4 5 6 Java强类型 变量定义，入参，出参有明确类型 Python弱类型 无类型定义，代码风格最好后缀类型， 变量命名最好</description></item><item><title>toB行业研发思考</title><link>http://localhost:1313/post/tob%E8%A1%8C%E4%B8%9A%E7%A0%94%E5%8F%91%E6%80%9D%E8%80%83/</link><pubDate>Sun, 20 Dec 2020 11:15:09 +0800</pubDate><guid>http://localhost:1313/post/tob%E8%A1%8C%E4%B8%9A%E7%A0%94%E5%8F%91%E6%80%9D%E8%80%83/</guid><description>一.开发阶段 1.需求 自我驱动/客户驱动 这里注意的是两者的优先级别，以及个别客户定制化对业务抽象造成的耦合问题 2.迭代 版本的划分，重构时机的选</description></item><item><title>Reactor模式Scaling I/O密集应用</title><link>http://localhost:1313/post/reactor%E6%A8%A1%E5%BC%8Fscaling-io%E5%AF%86%E9%9B%86%E5%BA%94%E7%94%A8/</link><pubDate>Fri, 28 Aug 2020 15:00:00 +0000</pubDate><guid>http://localhost:1313/post/reactor%E6%A8%A1%E5%BC%8Fscaling-io%E5%AF%86%E9%9B%86%E5%BA%94%E7%94%A8/</guid><description>设计实现一个I/O密集型的聊天室应用 1.单线程/多线程? 单进程/多进程? 2.阻塞io/非阻塞io/多路复用？ 1.多线程阻塞I/O 在循环中等待</description></item><item><title>Kibana查询语法</title><link>http://localhost:1313/post/kibana%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95/</link><pubDate>Wed, 26 Aug 2020 22:00:00 +0000</pubDate><guid>http://localhost:1313/post/kibana%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95/</guid><description>1.词Terms 单词Term &amp;quot;hello&amp;quot; 语句Phrase &amp;quot;hello world&amp;quot; 2.域filed 在查询中指定filed，否则走默认filed 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</description></item><item><title>redis expire不生效踩坑级</title><link>http://localhost:1313/post/redis-expire%E4%B8%8D%E7%94%9F%E6%95%88%E8%B8%A9%E5%9D%91%E8%AE%B0/</link><pubDate>Sat, 22 Aug 2020 10:00:00 +0000</pubDate><guid>http://localhost:1313/post/redis-expire%E4%B8%8D%E7%94%9F%E6%95%88%E8%B8%A9%E5%9D%91%E8%AE%B0/</guid><description>一.flask-limit限流原理 项目配置采用了固定时间窗口策略 incr和expire配合，每次请求来的时候 incr后的值与amount上限</description></item><item><title>Go基础语法</title><link>http://localhost:1313/post/go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link><pubDate>Fri, 04 Oct 2019 20:00:00 +0000</pubDate><guid>http://localhost:1313/post/go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</guid><description>1.变量/常量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # var name = expression 根据expression判断type var a = &amp;#34;initial&amp;#34; fmt.Println(a) # var name type = expression var</description></item><item><title>Py优化技巧</title><link>http://localhost:1313/post/py%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/</link><pubDate>Fri, 04 Oct 2019 19:00:00 +0000</pubDate><guid>http://localhost:1313/post/py%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/</guid><description>1.函数返回值缓存 可以把一个非常耗时的函数调用变成O(1)时间复杂度 适用于在处理固定参数的函数被重复调用时 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description></item><item><title>Py性能分析示例</title><link>http://localhost:1313/post/py%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E7%A4%BA%E4%BE%8B/</link><pubDate>Thu, 03 Oct 2019 19:00:00 +0000</pubDate><guid>http://localhost:1313/post/py%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E7%A4%BA%E4%BE%8B/</guid><description>1.time.time() 简单的计时器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/python import time def timefunc(f): def f_timer(*args, **kwargs): start = time.time() result = f(*args, **kwargs) end = time.time() print f.__name__, &amp;#39;took&amp;#39;, end - start, &amp;#39;time&amp;#39; return result return f_timer @timefunc def test(): for i in xrange(100): print i test() 2.time</description></item><item><title>Python高阶函数</title><link>http://localhost:1313/post/python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</link><pubDate>Wed, 02 Oct 2019 19:00:00 +0000</pubDate><guid>http://localhost:1313/post/python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</guid><description>python高阶函数 1.map map(function, iterable) The map() function takes the form map(function, iterable) and applies function to each item in iterable to return a list in Python 2 or an iterable map object in Python 3, 将iterable中的每个元素作用与funciton</description></item><item><title>dogpile cache总结</title><link>http://localhost:1313/post/dogpile-cache%E6%80%BB%E7%BB%93/</link><pubDate>Mon, 30 Sep 2019 19:00:00 +0000</pubDate><guid>http://localhost:1313/post/dogpile-cache%E6%80%BB%E7%BB%93/</guid><description>1.介绍 dogpile是python缓存的开源库，openstack项目在使用 官方文档 https://dogpilecache.sqlalchemy.org/en/latest/ dogpile provides the concept of a “dogpile lock”, a control structure which allows a</description></item><item><title>Python常用库</title><link>http://localhost:1313/post/python%E5%B8%B8%E7%94%A8%E5%BA%93/</link><pubDate>Thu, 26 Sep 2019 19:00:00 +0000</pubDate><guid>http://localhost:1313/post/python%E5%B8%B8%E7%94%A8%E5%BA%93/</guid><description>Python常用库 • atexit allows you to register functions for your program to call when it exits. 在程序的任何地方都可以注册一个或多个回调函数，在程序退出时执行 • argparse provides functions for parsing command line arguments. 解析命令行参</description></item><item><title>关于GIL</title><link>http://localhost:1313/post/%E5%85%B3%E4%BA%8Egil/</link><pubDate>Fri, 13 Sep 2019 19:00:00 +0000</pubDate><guid>http://localhost:1313/post/%E5%85%B3%E4%BA%8Egil/</guid><description>GIL介绍 在Cpython中，Gloabl Interpreter Lock (GIL) GIL必须被获取，在线程安全访问python对象之前 如果没有GIL, 即使最简单的操作也可能出</description></item><item><title>pyflame使用</title><link>http://localhost:1313/post/pyflame%E4%BD%BF%E7%94%A8/</link><pubDate>Tue, 10 Sep 2019 17:00:00 +0000</pubDate><guid>http://localhost:1313/post/pyflame%E4%BD%BF%E7%94%A8/</guid><description>pyflame介绍 uber开源的一款工具，利用ptrace生成渲染图，用于分析性能瓶颈 https://github.com/uber/pyflame 1.安装 系统依赖(ubuntu系统) sudo apt-get install autoconf automake autotools-dev g++ pkg-config</description></item><item><title>elk日志系统实践</title><link>http://localhost:1313/post/elk%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%B7%B5/</link><pubDate>Tue, 04 Jun 2019 15:00:00 +0000</pubDate><guid>http://localhost:1313/post/elk%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%B7%B5/</guid><description>1.Elk Stack简介 Filebeat: 一个轻量级开源日志文件数据搜集器，基于 Logstash-Forwarder 源代码开发，是对它的替代。在需要采集日志数据的 server 上安装 Filebeat，并指定日志</description></item><item><title>redis相关总结-主从</title><link>http://localhost:1313/post/redis%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93-%E4%B8%BB%E4%BB%8E/</link><pubDate>Fri, 01 Feb 2019 17:00:00 +0000</pubDate><guid>http://localhost:1313/post/redis%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93-%E4%B8%BB%E4%BB%8E/</guid><description>redis主从 主节点(master), 从节点(slave) 默认情况下每个从节点只能有一个主节点，而主节点可以有多个从节点。复制的数据流, 只能</description></item><item><title>redis相关总结-使用</title><link>http://localhost:1313/post/redis%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93-%E4%BD%BF%E7%94%A8/</link><pubDate>Thu, 31 Jan 2019 17:00:00 +0000</pubDate><guid>http://localhost:1313/post/redis%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93-%E4%BD%BF%E7%94%A8/</guid><description>pipline管道 事务和Lua 发布订阅 1.发布消息 publish 2.订阅某个频道 unsubscribe 3.按照模式订阅和取消订阅</description></item><item><title>redis相关总结-持久化</title><link>http://localhost:1313/post/redis%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93-%E6%8C%81%E4%B9%85%E5%8C%96/</link><pubDate>Thu, 31 Jan 2019 17:00:00 +0000</pubDate><guid>http://localhost:1313/post/redis%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93-%E6%8C%81%E4%B9%85%E5%8C%96/</guid><description>redis持久化 redis中持久化分为RDB和AOF 1. RDB 当前进程数据生成快照保存到硬盘, 触发RDB持久化过程分为手动触发和自动触发 1.1 手动触发</description></item><item><title>redis相关总结-运维</title><link>http://localhost:1313/post/redis%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93-%E8%BF%90%E7%BB%B4/</link><pubDate>Wed, 30 Jan 2019 16:00:00 +0000</pubDate><guid>http://localhost:1313/post/redis%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93-%E8%BF%90%E7%BB%B4/</guid><description>阻塞 1.内在原因 慢查询/CPU饱和/持久化阻塞 2.外部原因 CPU竞争/内存交换/网络问题 1.慢查询 1.发现耗时的命令, 修改为低算法度的命令，</description></item><item><title>缓存总结</title><link>http://localhost:1313/post/%E7%BC%93%E5%AD%98%E6%80%BB%E7%BB%93/</link><pubDate>Wed, 30 Jan 2019 16:00:00 +0000</pubDate><guid>http://localhost:1313/post/%E7%BC%93%E5%AD%98%E6%80%BB%E7%BB%93/</guid><description>缓存总结 1.使用场景 不经常变更的数据存到缓存中，减少db压力 2.缓存分类 1.分布式缓存redis/memcached 2.本地缓存cachet</description></item><item><title>Python Anti-Patterns总结</title><link>http://localhost:1313/post/python-anti-patterns%E6%80%BB%E7%BB%93/</link><pubDate>Thu, 24 Jan 2019 16:00:00 +0000</pubDate><guid>http://localhost:1313/post/python-anti-patterns%E6%80%BB%E7%BB%93/</guid><description>Readability可读性 1.Asking for permission instead of forgiveness EAFP (easier to ask for forgiveness than permission) 假设需要的变量/文件文件, 如果有问题则捕获异常 1 2 3 4 5 6 7 8 9 10 11 12 # Bad import os if os.path.exists(&amp;#34;file.txt&amp;#34;): os.unlink(&amp;#34;file.txt&amp;#34;)</description></item><item><title>软件架构 Python实现 笔记 (一) 扩展/并发概念</title><link>http://localhost:1313/post/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84-python%E5%AE%9E%E7%8E%B0-%E7%AC%94%E8%AE%B0-%E4%B8%80-%E6%89%A9%E5%B1%95%E5%B9%B6%E5%8F%91%E6%A6%82%E5%BF%B5/</link><pubDate>Sun, 05 Aug 2018 11:00:00 +0000</pubDate><guid>http://localhost:1313/post/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84-python%E5%AE%9E%E7%8E%B0-%E7%AC%94%E8%AE%B0-%E4%B8%80-%E6%89%A9%E5%B1%95%E5%B9%B6%E5%8F%91%E6%A6%82%E5%BF%B5/</guid><description>1.扩展相关 水平扩展：增加服务器数量, 负载均衡的服务器集群 垂直扩展：单台机器优化CPU或者增大RAM 并发性 延迟 性能 可拓展性 高 低 高 高 高 高 不确定</description></item><item><title>软件架构 Python实现 笔记 (二) 多线程机制</title><link>http://localhost:1313/post/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84-python%E5%AE%9E%E7%8E%B0-%E7%AC%94%E8%AE%B0-%E4%BA%8C-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6/</link><pubDate>Sun, 05 Aug 2018 11:00:00 +0000</pubDate><guid>http://localhost:1313/post/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84-python%E5%AE%9E%E7%8E%B0-%E7%AC%94%E8%AE%B0-%E4%BA%8C-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6/</guid><description>线程模块公开了一个Thread类，它封装了一个执行线程。也公开了一下同步单元: 1.锁lock对象对于同步受保护的共享资源的访问很有用，以及与</description></item><item><title>uwsgi使用总结</title><link>http://localhost:1313/post/uwsgi%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</link><pubDate>Sat, 02 Jun 2018 18:37:31 +0000</pubDate><guid>http://localhost:1313/post/uwsgi%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid><description>uwsgi相关 Python项目中，一般是nginx + uwsgi的形式进行部署 简单实用 启动 uwsgi &amp;ndash;ini uwsgi.ini 停止 uwsgi &amp;ndash;stop uwsgi.pid 重载 uwsgi &amp;ndash;reload uwsgi.pid 配置 项目中实际配置 1 2 3 4</description></item><item><title>jackson/fastjson使用总结</title><link>http://localhost:1313/post/jacksonfastjson%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</link><pubDate>Mon, 02 Apr 2018 15:00:00 +0000</pubDate><guid>http://localhost:1313/post/jacksonfastjson%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid><description>jackson/fastjson 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>Java集合操作</title><link>http://localhost:1313/post/java%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C/</link><pubDate>Mon, 02 Apr 2018 15:00:00 +0000</pubDate><guid>http://localhost:1313/post/java%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C/</guid><description>一.List List和Set都继承了Collection 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Collection中的方法 1.add(o: E) 添加 2.addAll(c: Collection&amp;lt;? extends E&amp;gt;)</description></item><item><title>mybatis总结</title><link>http://localhost:1313/post/mybatis%E6%80%BB%E7%BB%93/</link><pubDate>Thu, 29 Mar 2018 11:00:00 +0000</pubDate><guid>http://localhost:1313/post/mybatis%E6%80%BB%E7%BB%93/</guid><description>一.基本用法 1.select 1.1 使用resultType SQL语句需要为所有列名和model属性名不一致的列设置别名，来实现自动映射 1 2 3 4 5 6 7 8 9 10 &amp;lt;select id=&amp;#34;selectAll&amp;#34;</description></item><item><title>Django REST Framework路由Router源代码解析</title><link>http://localhost:1313/post/django-rest-framework%E8%B7%AF%E7%94%B1router%E6%BA%90%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</link><pubDate>Thu, 27 Oct 2016 16:37:31 +0000</pubDate><guid>http://localhost:1313/post/django-rest-framework%E8%B7%AF%E7%94%B1router%E6%BA%90%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</guid><description>一. URL构成 正常情况下的url url(r'^article/(?P&amp;lt;year&amp;gt;\d{4})/(?P&amp;lt;month&amp;gt;\</description></item><item><title>Django项目布局最佳实践</title><link>http://localhost:1313/post/django%E9%A1%B9%E7%9B%AE%E5%B8%83%E5%B1%80%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Mon, 12 Sep 2016 16:59:31 +0000</pubDate><guid>http://localhost:1313/post/django%E9%A1%B9%E7%9B%AE%E5%B8%83%E5%B1%80%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>什么是django应用，settings，以及各种相关联的目录的最佳布局方式? Django1.4版本以后更新了默认的项目布局，这项工作花费了</description></item><item><title>Python模块总结</title><link>http://localhost:1313/post/python%E6%A8%A1%E5%9D%97/</link><pubDate>Wed, 07 Sep 2016 14:59:31 +0000</pubDate><guid>http://localhost:1313/post/python%E6%A8%A1%E5%9D%97/</guid><description>一.模块, 包 模块： 本质上python中每个文件都是一个模块 包： 除了包含模块外，还包含__init__.py文件，同时它允许嵌套。 定义一个包，</description></item><item><title>Python字符串处理</title><link>http://localhost:1313/post/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</link><pubDate>Sun, 04 Sep 2016 18:00:31 +0000</pubDate><guid>http://localhost:1313/post/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</guid><description>一.传统的％操作符 1.直接格式化字符 1 print &amp;#34;your score is %06.1f&amp;#34; % 9.5 2.以元组的形式格式化 1 2 3 country = &amp;#39;China&amp;#39; province = &amp;#39;ShangXi&amp;#39; print &amp;#34;I come from %s%s&amp;#34; %(country, province) 3.以字典的形式格式化 1 2 info = {&amp;#39;country&amp;#39;:&amp;#39;China&amp;#39;, &amp;#39;province&amp;#39;:&amp;#39;ShangXi&amp;#39;}</description></item><item><title>Hello World</title><link>http://localhost:1313/post/hello-world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/post/hello-world/</guid><description>Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.
Quick Start Create a new post 1 $ hexo new &amp;#34;My New Post&amp;#34; More info: Writing
Run server 1 $ hexo server More info: Server
Generate static files 1 $ hexo generate More info: Generating</description></item></channel></rss>