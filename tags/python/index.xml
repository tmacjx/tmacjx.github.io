<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on tmacKan - A record for Life</title><link>http://localhost:1313/tags/python/</link><description>Recent content in Python on tmacKan - A record for Life</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>tmackan</copyright><lastBuildDate>Fri, 04 Oct 2019 19:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Py优化技巧</title><link>http://localhost:1313/post/py%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/</link><pubDate>Fri, 04 Oct 2019 19:00:00 +0000</pubDate><guid>http://localhost:1313/post/py%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/</guid><description>1.函数返回值缓存 可以把一个非常耗时的函数调用变成O(1)时间复杂度 适用于在处理固定参数的函数被重复调用时 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description></item><item><title>Py性能分析示例</title><link>http://localhost:1313/post/py%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E7%A4%BA%E4%BE%8B/</link><pubDate>Thu, 03 Oct 2019 19:00:00 +0000</pubDate><guid>http://localhost:1313/post/py%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E7%A4%BA%E4%BE%8B/</guid><description>1.time.time() 简单的计时器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/python import time def timefunc(f): def f_timer(*args, **kwargs): start = time.time() result = f(*args, **kwargs) end = time.time() print f.__name__, &amp;#39;took&amp;#39;, end - start, &amp;#39;time&amp;#39; return result return f_timer @timefunc def test(): for i in xrange(100): print i test() 2.time</description></item><item><title>Python高阶函数</title><link>http://localhost:1313/post/python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</link><pubDate>Wed, 02 Oct 2019 19:00:00 +0000</pubDate><guid>http://localhost:1313/post/python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</guid><description>python高阶函数 1.map map(function, iterable) The map() function takes the form map(function, iterable) and applies function to each item in iterable to return a list in Python 2 or an iterable map object in Python 3, 将iterable中的每个元素作用与funciton</description></item><item><title>dogpile cache总结</title><link>http://localhost:1313/post/dogpile-cache%E6%80%BB%E7%BB%93/</link><pubDate>Mon, 30 Sep 2019 19:00:00 +0000</pubDate><guid>http://localhost:1313/post/dogpile-cache%E6%80%BB%E7%BB%93/</guid><description>1.介绍 dogpile是python缓存的开源库，openstack项目在使用 官方文档 https://dogpilecache.sqlalchemy.org/en/latest/ dogpile provides the concept of a “dogpile lock”, a control structure which allows a</description></item><item><title>Python常用库</title><link>http://localhost:1313/post/python%E5%B8%B8%E7%94%A8%E5%BA%93/</link><pubDate>Thu, 26 Sep 2019 19:00:00 +0000</pubDate><guid>http://localhost:1313/post/python%E5%B8%B8%E7%94%A8%E5%BA%93/</guid><description>Python常用库 • atexit allows you to register functions for your program to call when it exits. 在程序的任何地方都可以注册一个或多个回调函数，在程序退出时执行 • argparse provides functions for parsing command line arguments. 解析命令行参</description></item><item><title>关于GIL</title><link>http://localhost:1313/post/%E5%85%B3%E4%BA%8Egil/</link><pubDate>Fri, 13 Sep 2019 19:00:00 +0000</pubDate><guid>http://localhost:1313/post/%E5%85%B3%E4%BA%8Egil/</guid><description>GIL介绍 在Cpython中，Gloabl Interpreter Lock (GIL) GIL必须被获取，在线程安全访问python对象之前 如果没有GIL, 即使最简单的操作也可能出</description></item><item><title>Python Anti-Patterns总结</title><link>http://localhost:1313/post/python-anti-patterns%E6%80%BB%E7%BB%93/</link><pubDate>Thu, 24 Jan 2019 16:00:00 +0000</pubDate><guid>http://localhost:1313/post/python-anti-patterns%E6%80%BB%E7%BB%93/</guid><description>Readability可读性 1.Asking for permission instead of forgiveness EAFP (easier to ask for forgiveness than permission) 假设需要的变量/文件文件, 如果有问题则捕获异常 1 2 3 4 5 6 7 8 9 10 11 12 # Bad import os if os.path.exists(&amp;#34;file.txt&amp;#34;): os.unlink(&amp;#34;file.txt&amp;#34;)</description></item><item><title>软件架构 Python实现 笔记 (一) 扩展/并发概念</title><link>http://localhost:1313/post/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84-python%E5%AE%9E%E7%8E%B0-%E7%AC%94%E8%AE%B0-%E4%B8%80-%E6%89%A9%E5%B1%95%E5%B9%B6%E5%8F%91%E6%A6%82%E5%BF%B5/</link><pubDate>Sun, 05 Aug 2018 11:00:00 +0000</pubDate><guid>http://localhost:1313/post/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84-python%E5%AE%9E%E7%8E%B0-%E7%AC%94%E8%AE%B0-%E4%B8%80-%E6%89%A9%E5%B1%95%E5%B9%B6%E5%8F%91%E6%A6%82%E5%BF%B5/</guid><description>1.扩展相关 水平扩展：增加服务器数量, 负载均衡的服务器集群 垂直扩展：单台机器优化CPU或者增大RAM 并发性 延迟 性能 可拓展性 高 低 高 高 高 高 不确定</description></item><item><title>软件架构 Python实现 笔记 (二) 多线程机制</title><link>http://localhost:1313/post/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84-python%E5%AE%9E%E7%8E%B0-%E7%AC%94%E8%AE%B0-%E4%BA%8C-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6/</link><pubDate>Sun, 05 Aug 2018 11:00:00 +0000</pubDate><guid>http://localhost:1313/post/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84-python%E5%AE%9E%E7%8E%B0-%E7%AC%94%E8%AE%B0-%E4%BA%8C-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6/</guid><description>线程模块公开了一个Thread类，它封装了一个执行线程。也公开了一下同步单元: 1.锁lock对象对于同步受保护的共享资源的访问很有用，以及与</description></item><item><title>uwsgi使用总结</title><link>http://localhost:1313/post/uwsgi%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</link><pubDate>Sat, 02 Jun 2018 18:37:31 +0000</pubDate><guid>http://localhost:1313/post/uwsgi%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid><description>uwsgi相关 Python项目中，一般是nginx + uwsgi的形式进行部署 简单实用 启动 uwsgi &amp;ndash;ini uwsgi.ini 停止 uwsgi &amp;ndash;stop uwsgi.pid 重载 uwsgi &amp;ndash;reload uwsgi.pid 配置 项目中实际配置 1 2 3 4</description></item><item><title>Django REST Framework路由Router源代码解析</title><link>http://localhost:1313/post/django-rest-framework%E8%B7%AF%E7%94%B1router%E6%BA%90%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</link><pubDate>Thu, 27 Oct 2016 16:37:31 +0000</pubDate><guid>http://localhost:1313/post/django-rest-framework%E8%B7%AF%E7%94%B1router%E6%BA%90%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</guid><description>一. URL构成 正常情况下的url url(r'^article/(?P&amp;lt;year&amp;gt;\d{4})/(?P&amp;lt;month&amp;gt;\</description></item><item><title>Python模块总结</title><link>http://localhost:1313/post/python%E6%A8%A1%E5%9D%97/</link><pubDate>Wed, 07 Sep 2016 14:59:31 +0000</pubDate><guid>http://localhost:1313/post/python%E6%A8%A1%E5%9D%97/</guid><description>一.模块, 包 模块： 本质上python中每个文件都是一个模块 包： 除了包含模块外，还包含__init__.py文件，同时它允许嵌套。 定义一个包，</description></item><item><title>Python字符串处理</title><link>http://localhost:1313/post/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</link><pubDate>Sun, 04 Sep 2016 18:00:31 +0000</pubDate><guid>http://localhost:1313/post/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</guid><description>一.传统的％操作符 1.直接格式化字符 1 print &amp;#34;your score is %06.1f&amp;#34; % 9.5 2.以元组的形式格式化 1 2 3 country = &amp;#39;China&amp;#39; province = &amp;#39;ShangXi&amp;#39; print &amp;#34;I come from %s%s&amp;#34; %(country, province) 3.以字典的形式格式化 1 2 info = {&amp;#39;country&amp;#39;:&amp;#39;China&amp;#39;, &amp;#39;province&amp;#39;:&amp;#39;ShangXi&amp;#39;}</description></item></channel></rss>